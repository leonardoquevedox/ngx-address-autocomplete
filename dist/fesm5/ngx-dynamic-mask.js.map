{"version":3,"file":"ngx-dynamic-mask.js.map","sources":["ng://ngx-dynamic-mask/ngx-address-autocomplete.ts","ng://ngx-dynamic-mask/ngx-address-autocomplete.module.ts"],"sourcesContent":["/**\n * @license MIT\n * @version 1.1.0\n * @author Leonardo Quevedo\n * @description Address autocomplete directive.\n */\n\nimport { Directive, EventEmitter, Input, Output  } from '@angular/core'\n\ndeclare var google\n\n@Directive({\n    selector: '[ngx-address-autocomplete]'\n})\nexport class NgxAddressAutocomplete {\n\n    MAX_RADIUS = 100000\n    ELEMENT_INITIALIZATION_DELAY = 2000\n\n    @Input('ngx-address-autocomplete') uniqueId: string\n    @Output() onSelect: EventEmitter<any> = new EventEmitter()\n    @Input('options') options: any = {}\n\n    DEFAULT_KEY_MAPPING = {\n        'formatted_address': 'vicinity',\n        'street': 'street',\n        'street_number': 'number',\n        'sublocality_level_1': 'neighbourhood',\n        'administrative_area_level_2': 'city',\n        'postal_code': 'postalCode',\n        'administrative_area_level_1': 'state',\n        'country': 'country'\n    }\n\n    constructor() { }\n\n    ngOnInit() {\n        setTimeout(() => {\n            let inputId = this.uniqueId\n            let div = document.querySelector(`[ngx-address-autocomplete=${inputId}]`)\n            if (!div)\n                console.warn(NgxAddressAutocomplete.name + ': Whoops! We were unable to find any divs with the id provided :(')\n            let divIsAnInput = div && div.nodeName == 'INPUT'\n            let input: any = divIsAnInput ? div : (document.querySelector(`[ngx-address-autocomplete=${inputId}] input`))\n            if (!input)\n                console.warn(NgxAddressAutocomplete.name + ': Whoops! Be sure to add the directive only to inputs or divs with input children )')\n            this.generateAutocompleteInput(input)\n        }, this.ELEMENT_INITIALIZATION_DELAY)\n    }\n\n    async generateAutocompleteInput(input) {\n        let coordinates\n        try {\n            coordinates = await this.getUserLocation()\n        } catch (e) {\n            console.warn(e)\n        } finally {\n            if (coordinates) { /* In case the coordinates were obtained successfully */\n                let autocomplete = new google.maps.places.Autocomplete(input, this.options)\n                let circle = new google.maps.Circle({\n                    center: <google.maps.LatLng>coordinates,\n                    radius: this.options.radius || this.MAX_RADIUS\n                })\n                autocomplete.setBounds(circle.getBounds())\n                autocomplete.addListener('place_changed', () => {\n                    let place = autocomplete.getPlace()\n                    let address = this.parseAddress(place)\n                    this.onSelect.emit({ place: place, address: address })\n                })\n            }\n        }\n    }\n\n    async getUserLocation() {\n        return new Promise((resolve, reject) => {\n            window.navigator.geolocation.getCurrentPosition((location) => {\n                resolve(this.getLatLngFrom(location))\n            }, (err) => {\n                reject(err)\n            })\n        })\n    }\n\n    getLatLngFrom(location) {\n\n        let coordinates = typeof google !== 'undefined' ? new google.maps.LatLng(location.coords.latitude, location.coords.longitude) : this.createFallbackCoordinates(location)\n        return coordinates\n    }\n\n    createFallbackCoordinates(nativeCoordinates) {\n        nativeCoordinates.lat = function () {\n            return this.coords.latitude\n        }\n        nativeCoordinates.lng = function () {\n            return this.coords.longitude\n        }\n        return nativeCoordinates\n    }\n\n    getAddressElement(gmapsAddressComponent: Array<any>, addressComponentCode: string) {\n        let value\n        gmapsAddressComponent.map((element) => {\n            if (element.types && element.types.indexOf && (element.types.indexOf(addressComponentCode) > -1))\n                value = element.short_name || element.long_name\n        })\n        return value\n    }\n\n    getPlaceLatLng(place: google.maps.places.PlaceResult) {\n        return {\n            lng: place.geometry.location.lng(),\n            lat: place.geometry.location.lat()\n        }\n    }\n\n    getAddressFromPlace(place: google.maps.places.PlaceResult, keyMapping?: any) {\n        if (!place || !place.geometry) {\n            console.warn(NgxAddressAutocomplete.name + ': Whoops! It looks like the geometry property is missing from this place.')\n            return false\n        }\n        let address: any = {}\n        let addressKeys = keyMapping || this.DEFAULT_KEY_MAPPING\n        for (let i = 0; i < place.address_components.length; i++) {\n            let infoType = place.address_components[i].types[0]\n            let infoIsRequired = addressKeys[infoType]\n            if (infoIsRequired) {\n                let infoValue = place.address_components[i]['long_name']\n                address[addressKeys[infoType]] = infoValue\n            }\n        }\n        address.vicinity = place.formatted_address\n        return address\n    }\n\n    parseAddress(place: google.maps.places.PlaceResult) {\n        if (!place) return {}\n        let rawAddress = place.address_components\n        let address: any = {}\n        /* Parses address */\n        address.streetNumber = this.getAddressElement(rawAddress, 'street_number')\n        address.location = this.getPlaceLatLng(place)\n        address.street = this.getAddressElement(rawAddress, 'route')\n        address.number = this.getAddressElement(rawAddress, 'street_number')\n        address.neighbourhood = this.getAddressElement(rawAddress, 'sublocality')\n        address.city = this.getAddressElement(rawAddress, 'administrative_area_level_2')\n        address.state = this.getAddressElement(rawAddress, 'administrative_area_level_1')\n        address.country = this.getAddressElement(rawAddress, 'country')\n        address.postalCode = this.getAddressElement(rawAddress, 'postal_code')\n        if (address.streetNumber) address.street = address.street + ', ' + address.streetNumber\n        return address\n    }\n}","/**\n * @license MIT\n * @author Leonardo Quevedo\n * @description Directive module.\n */\n\nimport { NgModule } from '@angular/core'\nimport { CommonModule } from '@angular/common'\nimport { NgxAddressAutocomplete } from './ngx-address-autocomplete'\n\n@NgModule({\n    imports: [CommonModule],\n    declarations: [NgxAddressAutocomplete],\n    exports: [NgxAddressAutocomplete]\n})\nexport class NgxAddressAutocompleteModule { }"],"names":[],"mappings":"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"}
